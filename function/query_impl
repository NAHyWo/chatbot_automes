import os
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import numpy as np
import pymysql
from config import config

matplotlib.use('Agg')

# 현재 파일 기준으로 상위 폴더의 font/malgun.ttf 경로 지정
current_dir = os.path.dirname(os.path.abspath(__file__))
data_dir = os.path.abspath(os.path.join(current_dir, '..', 'data'))
font_path = os.path.abspath(os.path.join(current_dir, '..', 'font', 'malgun.ttf'))

if not os.path.exists(font_path):
    raise FileNotFoundError(f"폰트 파일을 찾을 수 없습니다: {font_path}")

# 폰트 적용
font_name = fm.FontProperties(fname=font_path).get_name()
plt.rc('font', family=font_name)


def get_connection():
    return pymysql.connect(
        host=config.DB_HOST,
        user=config.DB_USER,
        password=config.DB_PASSWORD,
        database=config.DB_NAME,
        port=config.DB_PORT,
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )


def function_generate_linegraph(query, title=None, x_label=None, y_label=None, save_path=None, show=False):
    try:
        conn = get_connection()
        cursor = conn.cursor()
        results = []
        queries = [q.strip() for q in query.split(';') if q.strip()]
        for q in queries:
            cursor.execute(q)
            results.append(cursor.fetchall())
        cursor.close()
        conn.close()
        # 첫 번째 쿼리 결과만 사용
        if results and results[0]:
            df = pd.DataFrame(results[0])
            # Decimal을 float로 변환
            columns = df.columns.tolist()
            df[columns[1]] = pd.to_numeric(df[columns[1]], errors='coerce')
        else:
            return "쿼리 결과가 없습니다."

        if df.empty:
            return "데이터 프레임이 비어 있습니다."

        # 컬럼 조건 확인
        if len(columns) == 2 and pd.api.types.is_numeric_dtype(df[columns[1]]):
            if pd.api.types.is_datetime64_any_dtype(df[columns[0]]):
                df[columns[0]] = pd.to_datetime(df[columns[0]])

            plt.figure(figsize=(10, 5))
            plt.plot(df[columns[0]], df[columns[1]], marker='o', color='orange')
            plt.title(title or "Line Graph")
            plt.xlabel(x_label or columns[0])
            plt.ylabel(y_label or columns[1])
            plt.grid(True)
            plt.xticks(rotation=45)
            plt.tight_layout()

            if not save_path:
                save_path = os.path.join(data_dir, 'line_graph.png')

            plt.savefig(save_path)
            plt.close()

            return save_path
        else:
            return f"그래프를 생성할 수 없는 형식입니다.\n\nDataFrame 미리보기:\n{df}"

    except Exception as e:
        return f"에러 발생: {e}"

def function_generate_bargraph(query, title=None, x_label=None, y_label=None, save_path=None):
    try:
        conn = get_connection()
        cursor = conn.cursor()
        results = []
        queries = [q.strip() for q in query.split(';') if q.strip()]
        for q in queries:
            cursor.execute(q)
            results.append(cursor.fetchall())
        cursor.close()
        conn.close()
        # 첫 번째 쿼리 결과만 사용
        if results and results[0]:
            df = pd.DataFrame(results[0])
            # Decimal을 float로 변환
            columns = df.columns.tolist()
            df[columns[1]] = pd.to_numeric(df[columns[1]], errors='coerce')
        else:
            return "쿼리 결과가 없습니다."

        if df.empty:
            return "데이터 프레임이 비어 있습니다."

        if len(columns) == 2 and pd.api.types.is_numeric_dtype(df[columns[1]]):
            title = title or "Bar Graph"
            x_label = x_label or "X"
            y_label = y_label or "Y"

            # 첫 번째 컬럼을 x축, 두 번째 컬럼을 y축으로 bar
            plt.figure(figsize=(10, 5))
            plt.bar(df[columns[0]], df[columns[1]], color='skyblue')

            plt.title(title)
            plt.xlabel(x_label)
            plt.ylabel(y_label)

            plt.grid(axis='y')
            plt.xticks(rotation=45)
            plt.tight_layout()

            if not save_path:
                save_path = os.path.join(data_dir, 'bar_graph.png')

            plt.savefig(save_path)
            plt.close()

            return save_path
        else:
            return f"그래프를 생성할 수 없는 형식입니다.\n\nDataFrame 미리보기:\n{df}"
    except Exception as e:
        return f"에러 발생: {e}"


def function_generate_piechart(query, title=None, x_label=None, y_label=None, save_path=None):
    try:
        conn = get_connection()
        cursor = conn.cursor()
        results = []
        queries = [q.strip() for q in query.split(';') if q.strip()]
        for q in queries:
            cursor.execute(q)
            results.append(cursor.fetchall())
        cursor.close()
        conn.close()
        # 첫 번째 쿼리 결과만 사용
        if results and results[0]:
            df = pd.DataFrame(results[0])
            # Decimal을 float로 변환
            columns = df.columns.tolist()
            df[columns[1]] = pd.to_numeric(df[columns[1]], errors='coerce')
        else:
            return "쿼리 결과가 없습니다."

        if df.empty:
            return "데이터 프레임이 비어 있습니다."
        if len(columns) == 2 and pd.api.types.is_numeric_dtype(df[columns[1]]):
            title = title or "Pie Chart"

            # 첫 번째 컬럼은 라벨, 두 번째 컬럼은 값으로 파이 차트 생성
            plt.figure(figsize=(7, 7))
            plt.pie(df[columns[1]] ,labels=df[columns[0]], autopct='%1.1f%%', startangle=90)

            plt.title(title)
            plt.tight_layout()

            if not save_path:
                save_path = os.path.join(data_dir, 'bar_graph.png')

            plt.savefig(save_path)
            plt.close()

            return save_path
        else:
            return f"그래프를 생성할 수 없는 형식입니다.\n\nDataFrame 미리보기:\n{df}"
    except Exception as e:
        return f"에러 발생: {e}"
